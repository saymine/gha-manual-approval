name: Manual Workflow Approval
description: Pause a workflow and get user approval to continue
branding:
  icon: pause
  color: yellow
inputs:
  approvers:
    description: Required approvers
    required: true
  secret:
    description: Secret
    required: true
  minimum-approvals:
    description: Minimum number of approvals to progress workflow
    required: false
  issue-title:
    description: The custom subtitle for the issue
    required: false
  issue-body:
    description: The custom body for the issue
    required: false
  exclude-workflow-initiator-as-approver:
    description: Whether or not to filter out the user who initiated the workflow as an approver if they are in the approvers list
    default: false
  additional-approved-words:
    description: Comma separated list of words that can be used to approve beyond the defaults.
    default: ''
  additional-denied-words:
    description: Comma separated list of words that can be used to deny beyond the defaults.
    default: ''
outputs:
  issue_url:
    description: The issue url
    value: ${{ steps.run.outputs.issue_url }}

runs:
  using: "composite"
  steps:
    - name: "setup: download binary"
      shell: bash
      run: |
        curl -OL https://github.com/saymine/gha-manual-approval/releases/download/v1.9.4/manual-approval-x86_64-linux
        chmod +x ./manual-approval-x86_64-linux

    - name: "run: manual approval"
      shell: bash
      id: run
      env:
        INPUT_APPROVERS: "${{ inputs.approvers }}"
        INPUT_SECRET: "${{ inputs.secret }}"
        INPUT_MINIMUM-APPROVALS: "${{ inputs.minimum-approvals }}"
        INPUT_ISSUE-TITLE: "${{ inputs.issue-title }}"
        INPUT_ISSUE-BODY: "${{ inputs.issue-body }}"
        INPUT_EXCLUDE-WORKFLOW-INITIATOR-AS-APPROVER: "${{ inputs.exclude-workflow-initiator-as-approver }}"
        INPUT_ADDITIONAL-APPROVED-WORDS: "${{ inputs.additional-approved-words }}"
        INPUT_ADDITIONAL-DENIED-WORDS: "${{ inputs.additional-denied-words }}"
      run: |
        exec ./manual-approval-x86_64-linux

        if [[ -f "output.json" ]]; then
          echo "output json file found"

          ISSUE_URL=$(jq -r '.issueUrl' output.json)
          echo "Issue url: $ISSUE_URL"
          echo "issue_url=$ISSUE_URL" >> $GITHUB_OUTPUT
        fi


        
